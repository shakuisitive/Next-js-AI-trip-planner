datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  role          String?       @default("user")
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  trips         Trip[]
  feedbacks     TripFeedback[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)

}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])

  deletedAt DateTime?

  status         Boolean? @default(true)
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])

    deletedAt DateTime?

  status         Boolean? @default(true)
}

// Trip Planning Models
model Trip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  tourName    String   // Added field for naming the tour
  tourStatus  String?
  tourCompletionDate DateTime?
  destination String
  startDate   DateTime
  endDate     DateTime
  budgetMin   Float
  budgetMax   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences  TripPreference?
  interests    TripInterest[]
  accommodations Accommodation[]
  days         Day[]
  feedback     TripFeedback?
}

model TripPreference {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId      String   @unique @db.ObjectId
  groupType   String
  travelStyle String
  pace        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripInterest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId    String   @db.ObjectId
  interest  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, interest])
}

model Accommodation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId        String   @db.ObjectId
  name          String
  type          String
  rating        Float
  pricePerNight Float
  description   String
  bookingUrl    String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  trip          Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  amenities     AccommodationAmenity[]
}

model AccommodationAmenity {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  accommodationId String   @db.ObjectId
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  accommodation  Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)

  @@unique([accommodationId, name])
}

model Day {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId         String   @db.ObjectId
  dayNumber      Int
  date           DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  trip           Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  places         Place[]
  transportation DayTransportation?
}

model DayTransportation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dayId       String   @unique @db.ObjectId
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  day         Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
}

model Place {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dayId       String   @db.ObjectId
  name        String
  type        String   // "attraction" or "restaurant"
  description String
  location    String
  timeOfDay   String
  duration    String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  day         Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
  restaurant  Restaurant?
  attraction  Attraction?
}

model Restaurant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  placeId     String   @unique @db.ObjectId
  cuisine     String
  priceRange  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Attraction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  placeId     String   @unique @db.ObjectId
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt DateTime?

  status         Boolean? @default(true)
  // Relations
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model TripFeedback {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId      String   @unique @db.ObjectId
  userId      String   @db.ObjectId
  rating      Int      // 1-5 star rating
  review      String   // Public review
  respondedByAdmin Boolean? @default(false)
  adminResponse    String?  // Admin's response to the feedback
  suggestion  String?  // Private suggestion to company
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  status      Boolean? @default(true)

  // Relations
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster queries when fetching user's feedback
}